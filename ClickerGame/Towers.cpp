#include "Towers.h"

// constructor for the tower class
Tower::Tower(std::string name, int baseCost, int wealthPerSecond, const char* iconFileName) :  name(name), baseCost(baseCost), wealthPerSecond(wealthPerSecond), totalOwned(0), color(WHITE), textColor(WHITE) {
	icon = LoadTexture(iconFileName);
}

float Tower::GenerateWealth() { //generates wealth for the player
	return wealthPerSecond * totalOwned; //return the wealth per second multiplied by the total owned
}

float Tower::GetCost(float* multiplier) { //returns the cost of the tower
	return baseCost * pow(*multiplier, totalOwned); //return the base cost multiplied by the multiplier to the power of the total owned
}

bool Tower::CanBuyTower(float* wealth, float* multiplier) { //checks if the player can buy the tower
	return *wealth >= GetCost(multiplier); //return true if the wealth is greater than or equal to the cost of the tower
}

void Tower::BuyTower(float* wealth, float* multiplier) { //buys the tower
	*wealth -= GetCost(multiplier); //reduce the wealth by the cost of the tower
	totalOwned++; //increment the total owned
}

Color* Tower::GetColor() { //returns the color of the tower
	return &color;
}

Color* Tower::GetTextColor() { //returns the text color of the tower
	return &textColor;
}

Texture2D* Tower::GetIcon() { //returns the icon of the tower
	return &icon;
}

string* Tower::GetName() { //returns the name of the tower
	return &name;
}

int* Tower::GetOwned() { //returns the total owned of the tower as a string
	return &totalOwned;
}


// constructor for the tower manager class
TowerManager::TowerManager(float* wealthPointer, float* deltatime, float* multiplierPointer) :   
	costMultiplier(1.2), wealthPointer(wealthPointer), deltatime(deltatime), passiveIncome(0), multiplierPointer(multiplierPointer) 
{
	towers.push_back(Tower("Athena's Olive Grove", 10, 1, "resources/OliveGroveIcon.png")); //add the olive grove tower
	towers.push_back(Tower("Dionysus's Winery", 100, 10, "resources/WineryIcon.png")); //add the winery tower
	towers.push_back(Tower("Hermes' Trade Route", 1000, 100, "resources/TradeRouteIcon.png")); //add the trade route tower
	towers.push_back(Tower("Hephaestus' Forge", 10000, 1000, "resources/ForgeIcon.png")); //add the forge tower
}
bool TowerManager::CanBuyTower(int* towerIndex) { //checks if the player can buy the tower from tower index
	return towers[*towerIndex].CanBuyTower(wealthPointer, &costMultiplier); //return the result of the CanBuyTower function
}

void TowerManager::BuyTower(int* towerIndex) { //buys the tower from tower index
	towers[*towerIndex].BuyTower(wealthPointer, &costMultiplier); //buy the tower
}

Color* TowerManager::GetTowerColor(int* towerIndex) { //returns the color of the tower from tower index
	return towers[*towerIndex].GetColor();
}

Color* TowerManager::GetTowerTextColor(int* towerIndex) { //returns the text color of the tower from tower index
	return towers[*towerIndex].GetTextColor();
}

void TowerManager::UpdateTowerColor(int* towerIndex, Color newColor) { //updates the color of the tower from tower index
	*GetTowerColor(towerIndex) = newColor;
}

void TowerManager::UpdateTowerTextColor(int* towerIndex, Color newColor) { //updates the text color of the tower from tower index
	*GetTowerTextColor(towerIndex) = newColor;
}

Texture2D* TowerManager::GetTowerIcon(int* towerIndex) { //returns the icon of the tower from tower index
	return towers[*towerIndex].GetIcon();
}

int TowerManager::GetTowerCount() { //returns the total number of tower types
	return towers.size();
}

string* TowerManager::GetTowerName(int* towerIndex) { //returns the name of the tower from tower index
	return towers[*towerIndex].GetName();
}

float TowerManager::GetTowerCost(int* towerIndex) { //returns the cost of the tower from tower index as a string
	return towers[*towerIndex].GetCost(&costMultiplier);
}

int* TowerManager::GetTowerOwned(int* towerIndex) { //returns the total owned of the tower from tower index as a string
	return towers[*towerIndex].GetOwned();
}

void TowerManager::CalculatePassiveIncome() { //calculates the passive income of the player
	passiveIncome = 0; //reset the passive income
	for (int i = 0; i < towers.size(); i++) { //for each tower
		passiveIncome += towers[i].GenerateWealth(); //add the wealth generated by the tower to the passive income
	}
}

float* TowerManager::GetPassiveIncome() { //returns the passive income of the player
	return &passiveIncome;
}

float TowerManager::CalculateClickValue() { //calculates the click value of the player
	float clickValue = 1; //set the click value to 1
	for (int i = 0; i < towers.size(); i++) { //for each tower
		clickValue += towers[i].GenerateWealth() / 10; //add the wealth generated by the tower to the click value
	}
	return clickValue; //return the click value
}